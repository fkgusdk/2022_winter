'''
1개의 구슬이 n*n 격자 안에 놓여져 있고, 격자는 벽으로 둘러쌓여 있습니다. 이 구슬은 방향을 갖고 있고, 해당 방향으로 1초에 한칸 씩 움직입니다.



구슬이 벽에 부딪히면 움직이는 방향이 반대로 뒤집혀 동일한 속도로 움직이는 것을 반복합니다. 이때 방향을 바꾸는 데에는 시간이 1만큼 소요됩니다.



처음 주어진 그림을 예로 4초 뒤까지의 모습을 순서대로 그려보면 다음과 같습니다.


구슬의 처음 위치와 초기 방향이 주어졌을 때, t초가 지난 이후에 해당 구슬의 위치를 구하는 프로그램을 작성해보세요.

입력 형식
첫 번째 줄에는 격자의 크기를 나타내는 n과 시간 t가 공백을 사이에 두고 주어집니다.

두 번째 줄에는 구슬 정보 (r, c, d)가 공백을 사이에 두고 주어집니다. 현재 구슬이 r행 c열에 놓여 있으며, d방향을 바라보고 있음을 뜻합니다. d는 위 아래 오른쪽 왼쪽을 의미하는 ‘U', ‘D’, ‘R’, 'L’ 4개의 문자 중 하나가 주어집니다. (1 ≤ r ≤ n, 1 ≤ c ≤ n)

2 ≤ n ≤ 50

1 ≤ t ≤ 100


'''


n, t = map(int, input().split())

r,c,d = input().split()
r,c = int(r), int(c)

mapper = {
    "U": 0,
    "D": 2,
    "R": 1,
    "L": 3,
}
dir_num = mapper[d]

dr = [-1,0,1,0] 
dc = [0,1,0,-1]

def in_range(x,y):
    return x >= 1 and x <= n and y >= 1 and y <= n

for _ in range(t):
    nr, nc = r + dr[dir_num], c + dc[dir_num]
    if not in_range(nr,nc):
        dir_num = (dir_num + 2) % 4
    else: r,c = nr,nc

print(r, c)
